package event.agency.management.system.gui;
import event.agency.management.system.database;
import event.agency.management.system.event;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.ArrayList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public class EditEventGUI extends JFrame {
    private database db;
    private ArrayList<event> events;
    private JTable table;
    private DefaultTableModel tableModel;
    private JTextField eventIdField;
    private JTextField eventCostField;
    private JButton updateButton;
    private Connection con;
    private final String userName = "root";
    private final String password = "";
    private final String dbName = "eventagency";
    private Connection connectToDatabase(){
        try {
            //Loading the jdbc driver
            Class.forName("com.mysql.cj.jdbc.Driver").newInstance();
            //Get a connection to database
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/" + dbName, userName, password);
        } catch (Exception e) {
            System.err.println("DATABASE CONNECTION ERROR: " + e.toString());
        }
        return con;
    }
    
    public EditEventGUI() {
        db = new database(); // initialize your database connection here
        
        // create table
        String[] columnNames = {"ID", "Name", "Cost"};
        tableModel = new DefaultTableModel(columnNames, 0);
        table = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(table);
        add(scrollPane, BorderLayout.CENTER);
        
        // create bottom panel with fields and update button
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.add(new JLabel("Event ID:"));
        eventIdField = new JTextField(10);
        bottomPanel.add(eventIdField);
        bottomPanel.add(new JLabel("Event Cost:"));
        eventCostField = new JTextField(10);
        bottomPanel.add(eventCostField);
        updateButton = new JButton("Update");
        updateButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                updateEvent();
            }
        });
        bottomPanel.add(updateButton);
        add(bottomPanel, BorderLayout.SOUTH);
        
        setTitle("Events");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setVisible(true);
    }
    
    private void loadEvents() {
        events = db.returnEvents();
        tableModel.setRowCount(0);
        for (event e : events) {
            Object[] rowData = {e.getEventId(), e.getEventName(), e.getCost()};
            tableModel.addRow(rowData);
        }
    }
    
    private void updateEvent() {
        con=connectToDatabase();
        int eventId = Integer.parseInt(eventIdField.getText());
        int eventCost = Integer.parseInt(eventCostField.getText());
        try {
            PreparedStatement stmt = con.prepareStatement("UPDATE eventt SET cost=? WHERE eventid=?");
            stmt.setInt(1, eventCost);
            stmt.setInt(2, eventId);
            int rowsUpdated = stmt.executeUpdate();

            if (rowsUpdated > 0) {
                System.out.println("Event with ID " + eventId + " found in the database.");
                dispose(); // Close main GUI
                EventOrganizerGUI gui1 = new EventOrganizerGUI(); // Create new GUI 1
                gui1.setVisible(true);
            }
            loadEvents(); // refresh the table to reflect changes
        } catch (Exception e) {
            System.err.println("Error updating event in database: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EditEventGUI gui = new EditEventGUI();
        gui.loadEvents();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
